<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Tech Talkin~</title>
 <link href="http://tim-tang.github.com/atom.xml" rel="self"/>
 <link href="http://tim-tang.github.com"/>
 <updated>2013-01-30T21:00:17+08:00</updated>
 <id>http://tim-tang.github.com</id>
 <author>
   <name>Tim.Tang,Linux,ROR,Mac,Vim,Git</name>
   <email>tang.jilong@gmail.com</email>
 </author>

 
 <entry>
   <title>Mac sudo without password</title>
   <link href="http://tim-tang.github.com/blog/2013/01/30/sudo-without-password"/>
   <updated>2013-01-30T00:00:00+08:00</updated>
   <id>http://tim-tang.github.com/blog/2013/01/30/sudo-without-password</id>
   <content type="html">&lt;p&gt;经常使用terminal的哥们肯定会遇到需要root权限的问题，我又比较懒，很多代码的产生就是为了方便懒惰的程序员,经常使用sudo的时候需要输入密码，反正自己的系统自己用就找了方法免去每次输入密码，下面介绍下：&lt;/p&gt;

&lt;h2 id='_etcsudoers_'&gt;修改 /etc/sudoers 这个文件&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;sudo visudo -f /etc/sudoers&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;建议用visudo 这个工具来修改，它会帮你校验文件配置是否正确&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id='id175'&gt;默认情况的权限是这样的&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;root ALL=(ALL) ALL
%admin ALL=(ALL) ALL&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id176'&gt;修改成如下：&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;# 修改amdin组都不用输入密码
%admin ALL=(ALL) NOPASSWD: NOPASSWD ALL
# 只是想让 tim 用户输入sudo不需要密码
tim ALL=(ALL) NOPASSWD: ALL&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;admin群组的用户都能执行所有命令， 不需要输入password&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id='id177'&gt;小技巧&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;# !! 表示上次执行的命令
sudo !!&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;有时候当我们输入了一大串命令后敲下去发现需要写sudo，这个时候不得不找回上个命令，然后回到命令开头，然后加上sudo空格, 这时候就可以用如上命令. 最后推荐一个shell 命令的网站&lt;a href='http://www.commandlinefu.com/commands/browse/sort-by-votes'&gt;commandlinefu.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content>
 </entry>
 
 <entry>
   <title>使用Git管理命令行配置</title>
   <link href="http://tim-tang.github.com/blog/2013/01/29/git-dotfiles"/>
   <updated>2013-01-29T00:00:00+08:00</updated>
   <id>http://tim-tang.github.com/blog/2013/01/29/git-dotfiles</id>
   <content type="html">&lt;p&gt;对于命令行重度依赖的开发者来说管理命令行的这些配置文件是比较头痛的问题，每次重新安装或服务器部署的时候都要拷贝文件重新配置，现在可以借助git来管理这些配置文件，通过写一个shell或则ruby的脚本即可实现，下面介绍具体实现：&lt;/p&gt;

&lt;h2 id='githubdotfilespull'&gt;在GitHub上创建dotfiles的项目并把代码pull到本地&lt;/h2&gt;

&lt;h2 id='gitconfigvimrcpsqlrcsymlink'&gt;把你本地的.gitconfig/.vimrc/.psqlrc等配置文件拷贝到工程目录下，并且重命名成＊.symlink&lt;/h2&gt;

&lt;h2 id='linkfiesrbruby'&gt;创建一个link-fies.rb文件（目前我用ruby来实现）&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env ruby
safe_mode = ARGV.include? &amp;#39;--safe&amp;#39;

linkables = Dir.glob(&amp;#39;*{.symlink}&amp;#39;)
linkables.each do |linkable|
    file = linkable.split(&amp;#39;/&amp;#39;).last.split(&amp;#39;.symlink&amp;#39;).last
    unless safe_mode and File.exists?(&amp;quot;#{ENV[&amp;#39;HOME&amp;#39;]}/.#{file}&amp;quot;)
    %x(ln -s -i -v $PWD/#{linkable} ~/.#{file})
    puts &amp;quot;.#{file} linked&amp;quot; if safe_mode
   end
end
# copy .vim folder into $HOME/
%x(cp -r $PWD/.vim $HOME/)&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='_githubalias_homebash_profile'&gt;为了方便同步脚本到 GitHub,我创建了两个alias 放在$HOME/.bash_profile&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;alias pull-dotfiles=&amp;#39;pushd $HOME/Documents/dotfiles &amp;amp;&amp;amp; git pull origin master &amp;amp;&amp;amp; ./link-files.rb --safe; popd&amp;#39;
alias push-dotfiles=&amp;#39;pushd $HOME/Documents/dotfiles &amp;amp;&amp;amp; git add -A &amp;amp;&amp;amp; git commit -m &amp;quot;Update dot files.&amp;quot; &amp;amp;&amp;amp; git push origin master; popd&amp;#39;&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;别忘了 $source ~/.bash_profile&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id='id174'&gt;具体的用法:&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ ./link-files --safe&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;要看详细的代码和配置可以看我在GitHub上的代码&lt;a href='https://github.com/tim-tang/dotfiles'&gt;&lt;strong&gt;dotfiles&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content>
 </entry>
 
 <entry>
   <title>Mac Tricks</title>
   <link href="http://tim-tang.github.com/blog/2013/01/26/mac-tricks"/>
   <updated>2013-01-26T00:00:00+08:00</updated>
   <id>http://tim-tang.github.com/blog/2013/01/26/mac-tricks</id>
   <content type="html">&lt;p&gt;Introduce to many useful mac tricks.&lt;/p&gt;

&lt;h2 id='update_mac_software_in_terminal'&gt;Update mac software in terminal&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ sudo softwareupdate -l
#proposed update
$ sudo softwareupdate -i -a
#In case you want to set well-defined upgrade you have to enter this command:
$ sudo softwareupdate -i AppName&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='resize_images_and_use_terminal'&gt;Resize images and use terminal&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ sips -Z 100x100 image.jpg&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='terminal_cursor_movements'&gt;Terminal cursor movements&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;ctrl+u =&amp;gt; delete from the cursor to the beginning of the line
ctrl+k =&amp;gt; delete from the cursor to the end of the line&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='enable_safari_inspector'&gt;Enable safari inspector&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;# enable safari develop tool
$ defaults write com.apple.Safari WebKitDeveloperExtras -bool true
# disable safari develop tool
$ defaults write com.apple.Safari WebKitDeveloperExtras -bool false&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;check show develop menu bar in Preference.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id='kill_dashboard'&gt;Kill dashboard&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;# disable dashboard
$ defaults write com.apple.dashboard mcx-disabled -boolean yes
$ killall Dock
# enable dashboard
$ defaults write com.apple.dashboard mcx-disabled -boolean false
$ killall Dock&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='show_hidden_files_in_finder'&gt;Show hidden files in finder&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ defaults write com.apple.finder AppleShowAllFiles true&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='screen_capture'&gt;Screen capture&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ screen capture -S ~/Desktop/xxxx.jpg
# only allow mouse selection mode
$ screen capture -s ~/Desktop/xxxx.jpg&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='kill_desktop'&gt;Kill desktop&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;# to hide the desktop icons
$ defaults write com.apple.finder CreateDesktop -bool false
# to show the desktop icons
$ defaults write com.apple.finder CreateDesktop -bool true&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='bring_up_the_force_quit_menu'&gt;Bring up the Force Quit menu.&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;⌘+⌥+ESC (COMMAND + OPTION + ESCAPE)&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Cheers!&lt;/p&gt;
&lt;/blockquote&gt;</content>
 </entry>
 
 <entry>
   <title>PostgreSQL Tablespace 介绍</title>
   <link href="http://tim-tang.github.com/blog/2013/01/24/postgres-tablesapce"/>
   <updated>2013-01-24T00:00:00+08:00</updated>
   <id>http://tim-tang.github.com/blog/2013/01/24/postgres-tablesapce</id>
   <content type="html">&lt;p&gt;PostgreSQL 允许管理员在文件系统里定义表空间存储位置，这样创建数据库对象时候就可以引用这个表空间了。好处就不用多说了，可以把数据库对象存储到不同的分区上，比如更好的存储之类。默认initdb之后会有两个表空间pg_global和pg_default。&lt;/p&gt;

&lt;h2 id='pgsql'&gt;查看pgsql当前表空间&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;postgres=&amp;gt; SELECT spcname FROM pg_tablespace;
spcname
------------
 pg_default
 pg_global
(2 rows)

postgres=&amp;gt; \db
Name    |  Owner   | Location
------------+----------+----------
pg_default | postgres |
pg_global  | postgres |&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;建立表空间需要注意的主要的是权限问题，而且要在新的空目录上建立，权限属于数据库管理员比如默认postgres。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id='id169'&gt;建立目录&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir /home/timtang/pgdata
$ sudo chown -R postgres:postgres /home/timtang/pgdata&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id170'&gt;如果权限没设置好下面语句会报错&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;postgres=&amp;gt; CREATE TABLESPACE space1 LOCATION &amp;#39;/home/timtang/pgdata&amp;#39;;&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id171'&gt;建测试表&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;postgres=&amp;gt; CREATE TABLE foo(i int) TABLESPACE space1;&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id172'&gt;查看表空间目录下多了文件&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;postgres=&amp;gt; \! ls /home/timtang/pgdata&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id173'&gt;删除表空间，需要注意的是先要删除所有该表空间里的对象&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;postgres=&amp;gt; DROP TABLESPACE space1;&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='tablespace'&gt;然每次建表都指定TABLESPACE也有点麻烦，可以指定默认表空间&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;postgres=&amp;gt; SET default_tablespace = space1;
postgres=&amp;gt; CREATE TABLE foo(i int);&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;这样TABLESPACE就建立好了，Cheers!&lt;/p&gt;
&lt;/blockquote&gt;</content>
 </entry>
 
 <entry>
   <title>Build Jekyll presentation with Jekyll and Hyde</title>
   <link href="http://tim-tang.github.com/blog/2013/01/20/jekyll-hyde-presentation"/>
   <updated>2013-01-20T00:00:00+08:00</updated>
   <id>http://tim-tang.github.com/blog/2013/01/20/jekyll-hyde-presentation</id>
   <content type="html">&lt;p&gt;Introduce to use Jekyll and Hyde ruby gem to create on-line ppt.&lt;/p&gt;

&lt;h2 id='install_jekyllandhyde_rubygem'&gt;Install Jekyll-and-hyde rubygem&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ gem install jekyll_and_hyde&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='generate_local_git_project'&gt;Generate local git project&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ jh new jekyll_presentation --github
$ cd jekyll_presentation
$ jh generate first_slide&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Go to &lt;em&gt;posts/fist&lt;/em&gt;slide.markdown and edit it.(with markdown.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id='create_one_repository_on_github'&gt;Create one repository on github&lt;/h2&gt;

&lt;h2 id='adding_remote_repostory'&gt;Adding remote repostory&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ git remote add origin git@github.com:tim-tang/jekyll_presentation.git
$ git add .
$ git commit -am &amp;#39;initial commit.&amp;#39;
$ git push origin gh-page   # push local project into github as git pages&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='testing_it'&gt;Testing it&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Go to &lt;a href='http://tim-tang.github.com/jekyll_presentation'&gt;http://tim-tang.github.com/jekyll_presentation&lt;/a&gt;, you will see the results.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Git pages service is amazing! Cheer!&lt;/p&gt;
&lt;/blockquote&gt;</content>
 </entry>
 
 <entry>
   <title>PostgreSQL Schema 应用</title>
   <link href="http://tim-tang.github.com/blog/2013/01/19/postgresql-schema"/>
   <updated>2013-01-19T00:00:00+08:00</updated>
   <id>http://tim-tang.github.com/blog/2013/01/19/postgresql-schema</id>
   <content type="html">&lt;p&gt;最近项目中需要用到PostgresSQL的schema模式，看了下相关文档觉得相当的方便，下面介绍下：&lt;/p&gt;

&lt;h3 id='schema'&gt;Schema的定义:&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;一个数据库包含一个或多个命名的模式，模式又包含表。模式还包含其它命名的对象，包括数据类型、函数，以及操作符。同一个对象名可以在不同的模式里使用而不会导致冲突； 比如，schema1和schema2都可以包含叫做version的表。和数据库不同，模式不是严格分离的：一个用户可以访问他所连接的数据库中的任意模式中的对象，只要他有权限。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='schema'&gt;Schema的应用场景:&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;* 允许多个用户使用一个数据库而不会干扰其它用户。&lt;/p&gt;

&lt;p&gt;* 把数据库对象组织成逻辑组，让它们更便于管理。&lt;/p&gt;

&lt;p&gt;* 第三方的应用可以放在不同的模式中，这样它们就不会和其它对象的名字冲突。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;本来需要放在不同数据库中的表可以放在同一个schema中，避免了在应用中使用JTA。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id='schema'&gt;关于Schema的操作:&lt;/h3&gt;

&lt;h2 id='schema'&gt;创建Schema&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;-- 该模式被创建后，其便可拥有自己的一组逻辑对象，如表、视图和函数等
CREATE SCHEMA schema1;&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='postgresqlpublic_schema'&gt;关于postgresql默认的public schema:&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;每当我们创建一个新的数据库时，PostgreSQL都会为我们自动创建该模式。当登录到该数据库时，如果没有特殊的指定，我们将以该模式(public)的形式操作各种数据对象。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CREATE TABLE version( ... ) 等同于 CREATE TABLE public.version( ... )&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='schema'&gt;Schema权限控制:&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;CREATE ROLE role_tim LOGIN PASSWORD &amp;#39;123456&amp;#39;;
CREATE SCHEMA schema1 AUTHORIZATION role_tim;&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='schema'&gt;删除Schema:&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;DROP SCHEMA schema1;
-- 删除模式及其所有对象，使用级联删除
DROP SCHEMA schema1 CASCADE;&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='schema_'&gt;Schema 搜索路径:&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;PostgreSQL通过查找一个搜索路径来判断一个表究竟属于哪个schema中的表，这个路径是一个需要查找的模式列表。在搜索路径里找到的第一个表将被当作选定的表。如果在搜索路径中 没有匹配表，那么就报告一个错误，即使匹配表的名字在数据库其它的模式中存在也如此。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-- 显示当前搜索路径
SHOW search_path;
-- 将模式加入到搜索路径中
SET search_path TO schema1;
-- 让某一个用户每次登陆都默认访问同一个模式
ALTER USER user_name SET search_path to schema1&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;有了PostgreSQL的schema就不用因为有相同表建立多个数据库，可以将多个数据库中的schema放入单个数据库中的多个schema中，在做db-migration的时候做一份migration script就可以，同样避免了多个数据库时候事务同步问题，还方便了数据库的管理真是一举多得！&lt;/p&gt;
&lt;/blockquote&gt;</content>
 </entry>
 
 <entry>
   <title>NerdTree Tricks</title>
   <link href="http://tim-tang.github.com/blog/2013/01/18/nerdtree-tricks"/>
   <updated>2013-01-18T00:00:00+08:00</updated>
   <id>http://tim-tang.github.com/blog/2013/01/18/nerdtree-tricks</id>
   <content type="html">&lt;p&gt;介绍一些NerdTree的使用技巧，方便快速开发。&lt;/p&gt;

&lt;h2 id='vimrc'&gt;.vimrc的配置：&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot; 让树更好看,我是没看出来
let NERDChristmasTree=1
&amp;quot; 让文件排列更有序
let NERDTreeCaseSensitiveSort=1
&amp;quot; 改变tree目录的同时改变工程的目录
let NERDTreeChDirMode=1
&amp;quot; 当输入 [:e filename]不再显示netrw,而是显示nerdtree
let NERDTreeHijackNetrw=1
&amp;quot; 将NerdTree的窗口设置在左侧
let NERDTreeWinPos=&amp;quot;left&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id168'&gt;帮助文档中的使用介绍:&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;o.......Open files, directories and bookmarks....................|NERDTree-o|.......打开文件
go......Open selected file, but leave cursor in the NERDTree.....|NERDTree-go|.......打开文件,光标  不变位置
t.......Open selected node/bookmark in a new tab.................|NERDTree-t|.......新标签打开
T.......Same as &amp;#39;t&amp;#39; but keep the focus on the current tab........|NERDTree-T|.......同上但留在当前
i.......Open selected file in a split window.....................|NERDTree-i|.......分裂窗口打开文件
gi......Same as i, but leave the cursor on the NERDTree..........|NERDTree-gi|.......同上留在当前
s.......Open selected file in a new vsplit.......................|NERDTree-s|.......垂直分裂窗口
gs......Same as s, but leave the cursor on the NERDTree..........|NERDTree-gs|.......
O.......Recursively open the selected directory..................|NERDTree-O|.......
x.......Close the current nodes parent...........................|NERDTree-x|.......收起目录
X.......Recursively close all children of the current node.......|NERDTree-X|.......收起所有
e.......Edit the current dif.....................................|NERDTree-e|
D.......Delete the current bookmark .............................|NERDTree-D|.......上出标签
P.......Jump to the root node....................................|NERDTree-P|.......跳到目录顶端
p.......Jump to current nodes parent.............................|NERDTree-p|.......跳到父目录
K.......Jump up inside directories at the current tree depth.....|NERDTree-K|.......跳到第一个目录
J.......Jump down inside directories at the current tree depth...|NERDTree-J|.......跳到最后一个文件
&amp;lt;C-J&amp;gt;...Jump down to the next sibling of the current directory...|NERDTree-C-J|
&amp;lt;C-K&amp;gt;...Jump up to the previous sibling of the current directory.|NERDTree-C-K|
C.......Change the tree root to the selected dir.................|NERDTree-C|.......改变当前目录
u.......Move the tree root up one directory......................|NERDTree-u|.......回上一级目录
U.......Same as &amp;#39;u&amp;#39; except the old root node is left open........|NERDTree-U|.......同上并保留显示文件结构
r.......Recursively refresh the current directory................|NERDTree-r|.......刷新目录
R.......Recursively refresh the current root.....................|NERDTree-R|.......刷新当前根目录
m.......Display the NERD tree menu...............................|NERDTree-m|.......显示树菜单
cd......Change the CWD to the dir of the selected node...........|NERDTree-cd|
I.......Toggle whether hidden files displayed....................|NERDTree-I|
f.......Toggle whether the file filters are used.................|NERDTree-f|
F.......Toggle whether files are displayed.......................|NERDTree-F|
B.......Toggle whether the bookmark table is displayed...........|NERDTree-B|

q.......Close the NERDTree window................................|NERDTree-q|
A.......Zoom (maximize/minimize) the NERDTree window.............|NERDTree-A|
?.......Toggle the display of the quick help.....................|NERDTree-?&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Cheers!&lt;/p&gt;
&lt;/blockquote&gt;</content>
 </entry>
 
 <entry>
   <title>Git workflow</title>
   <link href="http://tim-tang.github.com/blog/2013/01/11/git-workflow"/>
   <updated>2013-01-11T00:00:00+08:00</updated>
   <id>http://tim-tang.github.com/blog/2013/01/11/git-workflow</id>
   <content type="html">&lt;p&gt;最近做项目，用到git的分支和开发流程整合,纪录一下具体的实践。&lt;/p&gt;

&lt;h2 id='origin'&gt;基于origin来创建分支&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;git branch hotfix
git push origin hotfix&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='commit_hash'&gt;基于某个commit hash创建分支&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;git checkout master
git checkout &amp;lt;commit hash&amp;gt;
git checkout -b hotfix&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='originhostfix_branch'&gt;从origin中hostfix branch代码拉到本地&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;git checkout -b hotfix origin/hotfix&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='hotfix'&gt;提交代码到hotfix分支&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;git checkout hotfix
git commit -m &amp;quot;Check-in comments…&amp;quot;
git push origin hotfix&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='hotfixmergemaster'&gt;把hotfix的代码merge到master&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;git checkout master
git merge hotfix&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='git_masterhotfixdevelop'&gt;git master&amp;#8211;hotfix&amp;#8211;develop工作流程图&lt;/h2&gt;

&lt;p&gt;&lt;img alt='Hotfixes branching model' src='/images/post/branch-model-for-hotfixes.png' /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;当然我们还可以给master分支打上标签，在此之上新建不同版本的branch来维护，此文档会持续更新！&lt;/p&gt;
&lt;/blockquote&gt;</content>
 </entry>
 

</feed>
